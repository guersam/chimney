[info] welcome to sbt 1.5.0 (Oracle Corporation Java 10.0.1)
[info] loading settings for project global-plugins from idea.sbt ...
[info] loading global plugins from /home/lukaszl/.sbt/1.0/plugins
[info] loading settings for project chimney-build-build-build from metals.sbt ...
[info] loading project definition from /home/lukaszl/IdeaProjects/chimney/project/project/project
[info] loading settings for project chimney-build-build from metals.sbt ...
[info] loading project definition from /home/lukaszl/IdeaProjects/chimney/project/project
[success] Generated .bloop/chimney-build-build.json
[success] Total time: 0 s, completed 30.04.2021, 21:40:20
[info] loading settings for project chimney-build from metals.sbt,plugins.sbt ...
[info] loading project definition from /home/lukaszl/IdeaProjects/chimney/project
[success] Generated .bloop/chimney-build.json
[success] Total time: 1 s, completed 30.04.2021, 21:40:21
[info] loading settings for project root from build.sbt ...
[info] set current project to root (in build file:/home/lukaszl/IdeaProjects/chimney/)
[info] compiling 11 Scala sources to /home/lukaszl/IdeaProjects/chimney/chimney3/target/scala-3.0.0-RC3/test-classes ...
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
-------------------------------- Running Tests --------------------------------
[32m+[39m io.scalaland.chimney.DslSpec.use implicit transformer directly [2m21ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.root [2m6ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.work with basic renaming when bean getter lookup is disabled [2m26ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform value classes between their primitive representations [2m10ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always succeeds.option [2m11ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch simple objects [2m3ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.support automatic reading from java bean getters [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.use implicit transformer for nested field [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always succeeds.either [2m4ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch objects with value classes in patch [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always fails.option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is dropped - the target [2m8ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.case classes [2m14ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always fails.either [2m3ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.list [2m4ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.not compile if target type is wrong for value class [2m27ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.not compile if source for the target fields is not provided [2m11ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.not compile when bean getter lookup is disabled [2m22ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.not compile when matching an is- getter with type other than Boolean [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert case class to java bean using setters on the target object [2m1ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when bean setters are not enabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when accessors are missing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch with redundant fields [2m25ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.1-arg.option [2m11ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when method accessor is disabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.works if transform is configured with .enableMethodAccessors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided default value.pass when selector is valid [2m7ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided default value.not compile when selector is invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert java bean to java bean [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert to java bean involving recursive transformation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.support optional types in patch [2m11ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.map [2m24ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform enum represented as sealed trait hierarchy [2m18ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.support mixed optional and regular types [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.1-arg.either [2m13ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.java beans [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.2-arg.option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.use None when .enableOptionDefaultsToNone [2m9ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.tuples [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.2-arg.either [2m2ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.optional fields in the patched object overwritten by None [2m4ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.PhoneNumber [2m4ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.work without enabling flags.beans reading [2m8ms[0m  [34mtrue[39m
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if .enableOptionDefaultsToNone is missing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.fields of type Option[T] in the patched object not overwritten by None of type Option[Option[T]] [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.target has default value, but default values are disabled and .enableOptionDefaultsToNone [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not use None as default when other default value is set [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if default value is missing and no .enableOptionDefaultsToNone [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if default values are disabled and no .enableOptionDefaultsToNone [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.allow ignoring nones in patches [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.use implicit transformer for option when .enableUnsafeOption.use transformer when .enableUnsafeOption [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.use implicit transformer for option when .enableUnsafeOption.use transformer when .disableUnsafeOption adn then .enableUnsafeOption [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided generator function.pass when selector is valid [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided generator function.not compile when selector is invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.Person [2m16ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.work without enabling flags.beans writing [2m16ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.AddressBook [2m1ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.not work when disabled locally.beans reading [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.case classes with DSL [2m23ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.not work when disabled locally.beans writing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.Order [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.use default parameter value.field does not exists - the source [2m17ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.3-arg.option [2m33ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.use default parameter value.field does not exists - nested object [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.3-arg.either [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.field exists - the source [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.another modifier is provided [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.failure with error handling.option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.default values are disabled and another modifier is provided [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.local transformer for default value exists [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.local transformer for the whole entity exists [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.case classes [2m259ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform always becomes a Right [2m198ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.transform always succeeds [2m200ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.failure with error handling.either [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not compile when default parameter values are disabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.transform always fails [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: correct [2m3ms[0m  
-------------------------------- Running Tests --------------------------------
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: incorrect [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: without implicit [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.success.option [2m11ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.1-arg [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform will result in a Both if a field ends up as a Both [2m10ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelling modifier is not provided [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform will result in a Left if a field ends up as a Left [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.2-arg [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.relabel fields with relabelling modifier [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelling selectors are invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.success.either [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelled - a wrong way [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.3-arg [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.failure with error handling.option [2m4ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #19 [2m19ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.failure with error handling [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support value classes.transforming value class to a value [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.list [2m32ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.1-arg [2m7ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.failure with error handling.either [2m2ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #21 [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support value classes.transforming value to a value class [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.2-arg (accumulates errors) [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.recursive transform with nested validation.success [2m8ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.3-arg (accumulate errors to the first Left [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #40 [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped subtype transformation [2m6ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #44 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.traverse should accumulate on the left side [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped value classes.from value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped value classes.to value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.wrapped subtype transformation [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.recursive transform with nested validation.failure with error handling [2m6ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.pure inner transformer.F = Option [2m3ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped subtype transformation [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.pure inner transformer.F = Either[List[String], +*]] [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support scala.Option [2m20ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #46 [2m16ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldConst` [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped value classes.from value class [2m6ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldComputed` [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped value classes.to value class [2m4ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.map [2m39ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support automatically filling of scala.Unit [2m12ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.wrapped inner transformer.F = Option [2m16ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped options.pure inner transformer [2m7ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support scala.util.Either [2m19ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.wrapped inner transformer.F = Either[List[String], +*]] [2m19ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped options.wrapped inner transformer [2m18ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldRenamed` [2m31ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].pure inner transformer.F = Option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].pure inner transformer.F = Either[List[String], +*]] [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #94 [2m3ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped T to Option[T].pure inner transformer [2m3ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #101 [2m1ms[0m  [34mBar(a)[39m
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Iterables collections [2m14ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].wrapped inner transformer.F = Option [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped T to Option[T].wrapped inner transformer [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Arrays [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix 'wrong forward definition' when defining implicit val transformer [2m6ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].wrapped inner transformer.F = Either[List[String], +*]] [2m7ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when defining implicit def transformer [2m108ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped .enableUnsafeOption.pure inner transformer [2m116ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Iterables and Arrays [2m11ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when defining implicit val transformer wrapped in object [2m34ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix 'wrong forward reference' when assigning .derive to local transformer instance [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped .enableUnsafeOption.wrapped inner transformer [2m26ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Map [2m44ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Iterables and Maps [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Arrays and Maps [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when assigning .derive to local transformer instance wrapped in object [2m23ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.pure inner transformer.F = Option [2m60ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.pure inner transformer.F = Either[List[String], +*]] [2m1ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #108 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.use implicit transformer [2m7ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.preserve option to option mapping [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.wrapped inner transformer.F = Option [2m10ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped iterables or arrays.pure inner transformer [2m42ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.wrapped inner transformer.F = Either[List[String], +*]] [2m6ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.pure inner transformer.F = Option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.transforming None leads to NoSuchElementException [2m12ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.transforming fixed None type does not compile [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #113 [2m26ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #121 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.pure inner transformer.F = Either[List[String], +*]] [2m7ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #125 [2m7ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #139 [2m0ms[0m  [34mio.scalaland.chimney.IssuesSpec$$anon$27@6ca2f152[39m
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped iterables or arrays.wrapped inner transformer [2m16ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 1 [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.val and lazy vals work [2m16ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.works with rename [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.method is disabled by default [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.works if transform is configured with .enableMethodAccessors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.protected and private methods are not considered (even if accessible) [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped maps.pure inner transformer [2m10ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.wrapped inner transformer.F = Option [2m31ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 2 [2m21ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming from smaller to bigger enum [2m18ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.wrapped inner transformer.F = Either[List[String], +*]] [2m6ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 3 [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming from bigger to smaller enum [2m6ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming flat and deep enum [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.pure inner transformer.F = Option [2m11ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #156 [2m11ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming non-isomorphic domains [2m9ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #168.objects case [2m6ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming isomorphic domains that differ a detail [2m2ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #168.classes case [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.pure inner transformer.F = Either[List[String], +*]] [2m56ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming flat and deep domains [2m12ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.fail on ambiguous targets [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstanceF twice [2m22ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstance followed by withCoproductInstanceF [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.monomorphic source to polymorphic target [2m12ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstanceF followed by withCoproductInstance [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.polymorphic source to monomorphic target [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.polymorphic source to polymorphic target [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.handle type-inference for polymorphic computation [2m3ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped maps.wrapped inner transformer [2m116ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.automatically fill Unit parameters [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 1 [2m12ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support abstracting over a value in dsl operations [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.pure inner transformer [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform from non-case class to case class.support non-case classes inputs [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform from non-case class to case class.support trait inputs [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform T to Option[T] [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform between case classes and tuples.even recursively [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform between case classes and tuples.handle tuple transformation errors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 2 [2m15ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.defined by hand [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.generated automatically [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 3 [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.support mutual recursion [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.wrapped inner transformer.F = Option [2m54ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.wrapped inner transformer [2m25ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support macro dependent transformers.Option[List[A]] -> List[B] [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.scoped config only [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.scoped config overridden by instance flag [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.compile error when optionDefaultsToNone were disabled locally [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #185 [2m10ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #182 [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.mixed inner transformer [2m19ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped sealed families.pure inner transformer [2m12ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped sealed families.wrapped inner transformer [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.wrapped inner transformer.F = Either[List[String], +*]] [2m45ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.pure inner transformer.F = Option [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.pure inner transformer.F = Either[List[String], +*]] [2m2ms[0m  
[info] ----------------------------------- Results -----------------------------------
[info] - io.scalaland.chimney.cats.CatsValidatedSpec 670ms
[info]   + transform always succeeds 200ms  
[info]   + transform always fails 1ms  
[info]   - simple transform with validation 15ms
[info]     - success 11ms
[info]       + 1-arg 5ms  
[info]       + 2-arg 3ms  
[info]       + 3-arg 3ms  
[info]     + failure with error handling 4ms  
[info]   - recursive transform with nested validation 14ms
[info]     + success 8ms  
[info]     + failure with error handling 6ms  
[info]   + wrapped subtype transformation 3ms  
[info]   - wrapped value classes 10ms
[info]     + from value class 6ms  
[info]     + to value class 4ms  
[info]   - wrapped options 25ms
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.wrapped inner transformer.F = Option [2m49ms[0m  
[info]     + pure inner transformer 7ms  
[info]     + wrapped inner transformer 18ms  
[info]   - wrapped T to Option[T] 8ms
[info]     + pure inner transformer 3ms  
[info]     + wrapped inner transformer 5ms  
[info]   - wrapped .enableUnsafeOption 142ms
[info]     + pure inner transformer 116ms  java.util.NoSuchElementException: None.get
[info]     + wrapped inner transformer 26ms  java.util.NoSuchElementException: None.get
[info]   - wrapped iterables or arrays 58ms
[info]     + pure inner transformer 42ms  
[info]     + wrapped inner transformer 16ms  
[info]   - wrapped maps 126ms
[info]     + pure inner transformer 10ms  
[info]     + wrapped inner transformer 116ms  
[info]   - wrapped eithers 52ms
[info]     + pure inner transformer 8ms  
[info]     + wrapped inner transformer 25ms  
[info]     + mixed inner transformer 19ms  
[info]   - wrapped sealed families 16ms
[info]     + pure inner transformer 12ms  
[info]     + wrapped inner transformer 4ms  
[info] - io.scalaland.chimney.cats.CatsValidatedErrorPathSpec 330ms
[info]   - path of error should capture for 330ms
[info]     + case classes 259ms  
[info]     + list 32ms  
[info]     + map 39ms  
[info] - io.scalaland.chimney.cats.CatsIorSpec 226ms
[info]   + transform always becomes a Right 198ms  
[info]   + transform will result in a Both if a field ends up as a Both 10ms  
[info]   + transform will result in a Left if a field ends up as a Left 2ms  
[info]   - simple transforms with Ior 13ms
[info]     - success 13ms
[info]       + 1-arg 7ms  
[info]       + 2-arg (accumulates errors) 5ms  
[info]       + 3-arg (accumulate errors to the first Left 1ms  
[info]   + traverse should accumulate on the left side 1ms  
[info]   + wrapped subtype transformation 2ms  
[info] 
[info] Tests: 37, Passed: 37, Failed: 0
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.wrapped inner transformer.F = Either[List[String], +*]] [2m31ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.mixed inner transformer.F = Option [2m13ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.mixed inner transformer.F = Either[List[String], +*]] [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.pure inner transformer.F = Option [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.wrapped inner transformer.F = Option [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.wrapped inner transformer.F = Either[List[String], +*]] [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.fail compilation if there is unresolved conflict [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly using .withFieldComputed [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly using .withFieldComputedF [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly prioritizing: last wins [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.safe option unwrapping [2m9ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.scoped config only [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.scoped config overridden by instance flag [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.compile error when optionDefaultsToNone were disabled locally [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support config type-aliases [2m3ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support deriving wrapped transformer from pure [2m1ms[0m  
[info] ----------------------------------- Results -----------------------------------
[info] - io.scalaland.chimney.DslFSpec 617ms
[info]   - transform always succeeds 15ms
[info]     + option 11ms  
[info]     + either 4ms  
[info]   - transform always fails 5ms
[info]     + option 2ms  
[info]     + either 3ms  
[info]   - simple transform with validation 75ms
[info]     - success 65ms
[info]       - 1-arg 24ms
[info]         + option 11ms  
[info]         + either 13ms  
[info]       - 2-arg 4ms
[info]         + option 2ms  
[info]         + either 2ms  
[info]       - 3-arg 37ms
[info]         + option 33ms  
[info]         + either 4ms  
[info]     - failure with error handling 10ms
[info]       + option 2ms  
[info]       + either 8ms  
[info]   - recursive transform with nested validation 22ms
[info]     - success 16ms
[info]       + option 11ms  
[info]       + either 5ms  
[info]     - failure with error handling 6ms
[info]       + option 4ms  
[info]       + either 2ms  
[info]   + wrapped subtype transformation 6ms  
[info]   - wrapped value classes 0ms
[info]     + from value class 0ms  
[info]     + to value class 0ms  
[info]   - wrapped options 42ms
[info]     - pure inner transformer 7ms
[info]       + F = Option 3ms  
[info]       + F = Either[List[String], +*]] 4ms  
[info]     - wrapped inner transformer 35ms
[info]       + F = Option 16ms  
[info]       + F = Either[List[String], +*]] 19ms  
[info]   - wrapped T to Option[T] 15ms
[info]     - pure inner transformer 3ms
[info]       + F = Option 2ms  
[info]       + F = Either[List[String], +*]] 1ms  
[info]     - wrapped inner transformer 12ms
[info]       + F = Option 5ms  
[info]       + F = Either[List[String], +*]] 7ms  
[info]   - wrapped .enableUnsafeOption 77ms
[info]     - pure inner transformer 61ms
[info]       + F = Option 60ms  java.util.NoSuchElementException: None.get
[info]       + F = Either[List[String], +*]] 1ms  java.util.NoSuchElementException: None.get
[info]     - wrapped inner transformer 16ms
[info]       + F = Option 10ms  java.util.NoSuchElementException: None.get
[info]       + F = Either[List[String], +*]] 6ms  java.util.NoSuchElementException: None.get
[info]   - wrapped iterables or arrays 46ms
[info]     - pure inner transformer 9ms
[info]       + F = Option 2ms  
[info]       + F = Either[List[String], +*]] 7ms  
[info]     - wrapped inner transformer 37ms
[info]       + F = Option 31ms  
[info]       + F = Either[List[String], +*]] 6ms  
[info]   - wrapped maps 166ms
[info]     - pure inner transformer 67ms
[info]       + F = Option 11ms  
[info]       + F = Either[List[String], +*]] 56ms  
[info]     - wrapped inner transformer 99ms
[info]       + F = Option 54ms  
[info]       + F = Either[List[String], +*]] 45ms  
[info]   - wrapped eithers 106ms
[info]     - pure inner transformer 5ms
[info]       + F = Option 3ms  
[info]       + F = Either[List[String], +*]] 2ms  
[info]     - wrapped inner transformer 80ms
[info]       + F = Option 49ms  
[info]       + F = Either[List[String], +*]] 31ms  
[info]     - mixed inner transformer 21ms
[info]       + F = Option 13ms  
[info]       + F = Either[List[String], +*]] 8ms  
[info]   - wrapped sealed families 12ms
[info]     - pure inner transformer 8ms
[info]       + F = Option 8ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 4ms
[info]       + F = Option 3ms  
[info]       + F = Either[List[String], +*]] 1ms  
[info]   - implicit conflict resolution 9ms
[info]     + fail compilation if there is unresolved conflict 2ms  
[info]     + resolve conflict explicitly using .withFieldComputed 3ms  
[info]     + resolve conflict explicitly using .withFieldComputedF 1ms  
[info]     + resolve conflict explicitly prioritizing: last wins 3ms  
[info]   + safe option unwrapping 9ms  
[info]   - support scoped transformer configuration passed implicitly 8ms
[info]     + scoped config only 3ms  
[info]     + scoped config overridden by instance flag 5ms  
[info]     + compile error when optionDefaultsToNone were disabled locally 0ms  
[info]   + support config type-aliases 3ms  
[info]   + support deriving wrapped transformer from pure 1ms  
[info] - io.scalaland.chimney.IssuesSpec 396ms
[info]   + fix issue #19 19ms  
[info]   + fix issue #21 4ms  
[info]   + fix issue #40 2ms  
[info]   + fix issue #44 0ms  
[info]   + fix issue #46 16ms  
[info]   - fix issue #66 31ms
[info]     + fix for `withFieldConst` 0ms  
[info]     + fix for `withFieldComputed` 0ms  
[info]     + fix for `withFieldRenamed` 31ms  
[info]   + fix issue #94 3ms  
[info]   + fix issue #101 1ms  Bar(a)
[info]   - fix issue #105 171ms
[info]     + fix 'wrong forward definition' when defining implicit val transformer 6ms  
[info]     + fix stack overflow when defining implicit def transformer 108ms  
[info]     + fix stack overflow when defining implicit val transformer wrapped in object 34ms  
[info]     + fix 'wrong forward reference' when assigning .derive to local transformer instance 0ms  
[info]     + fix stack overflow when assigning .derive to local transformer instance wrapped in object 23ms  
[info]   + fix issue #108 1ms  
[info]   + fix issue #113 26ms  
[info]   + fix issue #121 0ms  
[info]   + fix issue #125 7ms  
[info]   + fix issue #139 0ms  io.scalaland.chimney.IssuesSpec$$anon$27@6ca2f152
[info]   - fix issue #149 29ms
[info]     + example 1 3ms  
[info]     + example 2 21ms  
[info]     + example 3 5ms  
[info]   + fix issue #156 11ms  
[info]   - fix issue #168 8ms
[info]     + objects case 6ms  
[info]     + classes case 2ms  
[info]   - fix issue #173 25ms
[info]     + withCoproductInstanceF twice 22ms  
[info]     + withCoproductInstance followed by withCoproductInstanceF 1ms  
[info]     + withCoproductInstanceF followed by withCoproductInstance 2ms  
[info]   - fix issue #177 30ms
[info]     + case 1 12ms  
[info]     + case 2 15ms  
[info]     + case 3 3ms  
[info]   + fix issue #185 10ms  
[info]   + fix issue #182 2ms  
[info] - io.scalaland.chimney.DslSpec 365ms
[info]   + use implicit transformer directly 21ms  
[info]   + use implicit transformer for nested field 5ms  
[info]   - support different set of fields of source and target 40ms
[info]     + field is dropped - the target 8ms  
[info]     - field is added to the target 32ms
[info]       + not compile if source for the target fields is not provided 11ms  
[info]       - fill the field with provided default value 7ms
[info]         + pass when selector is valid 7ms  
[info]         + not compile when selector is invalid 0ms  
[info]       - support default values for Options 10ms
[info]         + use None when .enableOptionDefaultsToNone 9ms  
[info]         + not compile if .enableOptionDefaultsToNone is missing 0ms  
[info]         + target has default value, but default values are disabled and .enableOptionDefaultsToNone 1ms  
[info]         + not use None as default when other default value is set 0ms  
[info]         + not compile if default value is missing and no .enableOptionDefaultsToNone 0ms  
[info]         + not compile if default values are disabled and no .enableOptionDefaultsToNone 0ms  
[info]       - use implicit transformer for option when .enableUnsafeOption 2ms
[info]         + use transformer when .enableUnsafeOption 2ms  
[info]         + use transformer when .disableUnsafeOption adn then .enableUnsafeOption 0ms  
[info]       - fill the field with provided generator function 2ms
[info]         + pass when selector is valid 2ms  
[info]         + not compile when selector is invalid 0ms  
[info]   - support default parameters 24ms
[info]     - use default parameter value 19ms
[info]       + field does not exists - the source 17ms  
[info]       + field does not exists - nested object 2ms  
[info]     - not use default parameter value 5ms
[info]       + field exists - the source 2ms  
[info]       + another modifier is provided 0ms  
[info]       + default values are disabled and another modifier is provided 1ms  
[info]       + local transformer for default value exists 1ms  
[info]       + local transformer for the whole entity exists 1ms  
[info]     + not compile when default parameter values are disabled 0ms  
[info]   - transform with rename 4ms
[info]     + between different types: correct 3ms  
[info]     + between different types: incorrect 1ms  
[info]     + between different types: without implicit 0ms  
[info]   - support relabelling of fields 3ms
[info]     + not compile if relabelling modifier is not provided 1ms  
[info]     + relabel fields with relabelling modifier 2ms  
[info]     + not compile if relabelling selectors are invalid 0ms  
[info]     + not compile if relabelled - a wrong way 0ms  
[info]   - support value classes 7ms
[info]     + transforming value class to a value 5ms  
[info]     + transforming value to a value class 2ms  
[info]   - support common data types 123ms
[info]     + support scala.Option 20ms  
[info]     + support automatically filling of scala.Unit 12ms  
[info]     + support scala.util.Either 19ms  
[info]     + support Iterables collections 14ms  
[info]     + support Arrays 1ms  
[info]     + support conversion between Iterables and Arrays 11ms  
[info]     + support Map 44ms  
[info]     + support conversion between Iterables and Maps 1ms  
[info]     + support conversion between Arrays and Maps 1ms  
[info]   - support with .enableUnsafeOption 24ms
[info]     + use implicit transformer 7ms  
[info]     + preserve option to option mapping 5ms  
[info]     + transforming None leads to NoSuchElementException 12ms  java.util.NoSuchElementException: None.get
[info]     + transforming fixed None type does not compile 0ms  
[info]   - support using method calls to fill values from target type 17ms
[info]     + val and lazy vals work 16ms  
[info]     + works with rename 1ms  
[info]     + method is disabled by default 0ms  
[info]     + works if transform is configured with .enableMethodAccessors 0ms  
[info]     + protected and private methods are not considered (even if accessible) 0ms  
[info]   - support sealed hierarchies 50ms
[info]     - enum types encoded as sealed hierarchies of case objects 27ms
[info]       + transforming from smaller to bigger enum 18ms  
[info]       + transforming from bigger to smaller enum 6ms  
[info]       + transforming flat and deep enum 3ms  
[info]     + transforming non-isomorphic domains 9ms  
[info]     + transforming isomorphic domains that differ a detail 2ms  
[info]     + transforming flat and deep domains 12ms  
[info]     + fail on ambiguous targets 0ms  
[info]   - support polymorphic source/target objects and modifiers 18ms
[info]     + monomorphic source to polymorphic target 12ms  
[info]     + polymorphic source to monomorphic target 2ms  
[info]     + polymorphic source to polymorphic target 0ms  
[info]     + handle type-inference for polymorphic computation 3ms  
[info]     + automatically fill Unit parameters 1ms  
[info]   + support abstracting over a value in dsl operations 5ms  
[info]   - transform from non-case class to case class 1ms
[info]     + support non-case classes inputs 1ms  
[info]     + support trait inputs 0ms  
[info]   + transform T to Option[T] 3ms  
[info]   - transform between case classes and tuples 4ms
[info]     + even recursively 4ms  
[info]     + handle tuple transformation errors 0ms  
[info]   - support recursive data structures 5ms
[info]     + defined by hand 3ms  
[info]     + generated automatically 0ms  
[info]     + support mutual recursion 2ms  
[info]   - support macro dependent transformers 8ms
[info]     + Option[List[A]] -> List[B] 8ms  
[info]   - support scoped transformer configuration passed implicitly 3ms
[info]     + scoped config only 2ms  
[info]     + scoped config overridden by instance flag 1ms  
[info]     + compile error when optionDefaultsToNone were disabled locally 0ms  
[info] - io.scalaland.chimney.PBTransformationSpec 84ms
[info]   + transform value classes between their primitive representations 10ms  
[info]   + not compile if target type is wrong for value class 27ms  
[info]   + transform enum represented as sealed trait hierarchy 18ms  
[info]   - transform bigger case classes 29ms
[info]     + PhoneNumber 4ms  
[info]     + Person 16ms  
[info]     + AddressBook 1ms  
[info]     + Order 8ms  
[info] - io.scalaland.chimney.JavaBeansSpec 76ms
[info]   - reading from Java beans 51ms
[info]     + work with basic renaming when bean getter lookup is disabled 26ms  
[info]     + support automatic reading from java bean getters 3ms  
[info]     + not compile when bean getter lookup is disabled 22ms  
[info]     + not compile when matching an is- getter with type other than Boolean 0ms  
[info]   - writing to Java beans 1ms
[info]     + convert case class to java bean using setters on the target object 1ms  
[info]     + not compile when bean setters are not enabled 0ms  
[info]     + not compile when accessors are missing 0ms  
[info]     + not compile when method accessor is disabled 0ms  
[info]     + works if transform is configured with .enableMethodAccessors 0ms  
[info]     + convert java bean to java bean 0ms  
[info]     + convert to java bean involving recursive transformation 0ms  
[info]   - scoped Java beans configuration 24ms
[info]     - work without enabling flags 24ms
[info]       + beans reading 8ms  true
[info]       + beans writing 16ms  
[info]     - not work when disabled locally 0ms
[info]       + beans reading 0ms  
[info]       + beans writing 0ms  
[info] - io.scalaland.chimney.ErrorPathSpec 74ms
[info]   - error path should capture for 74ms
[info]     + root 6ms  
[info]     + case classes 14ms  
[info]     + list 4ms  
[info]     + map 24ms  
[info]     + java beans 2ms  
[info]     + tuples 1ms  
[info]     + case classes with DSL 23ms  
[info] - io.scalaland.chimney.PatcherSpec 51ms
[info]   + patch simple objects 3ms  
[info]   + patch objects with value classes in patch 3ms  
[info]   + patch with redundant fields 25ms  
[info]   + support optional types in patch 11ms  
[info]   + support mixed optional and regular types 1ms  
[info]   + optional fields in the patched object overwritten by None 4ms  
[info]   + fields of type Option[T] in the patched object not overwritten by None of type Option[Option[T]] 1ms  
[info]   + allow ignoring nones in patches 3ms  
[info] 
[info] Tests: 206, Passed: 206, Failed: 0
-------------------------------- Running Tests --------------------------------
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.transform always succeeds [2m13ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.transform always fails [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.1-arg [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.2-arg [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.success.3-arg [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.simple transform with validation.failure with error handling [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.recursive transform with nested validation.success [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.recursive transform with nested validation.failure with error handling [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped subtype transformation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped value classes.from value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped value classes.to value class [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped options.pure inner transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped options.wrapped inner transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped T to Option[T].pure inner transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped T to Option[T].wrapped inner transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped .enableUnsafeOption.pure inner transformer [2m2ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped .enableUnsafeOption.wrapped inner transformer [2m0ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped iterables or arrays.pure inner transformer [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped iterables or arrays.wrapped inner transformer [2m3ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped maps.pure inner transformer [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped maps.wrapped inner transformer [2m8ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.pure inner transformer [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.wrapped inner transformer [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped eithers.mixed inner transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped sealed families.pure inner transformer [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedSpec.wrapped sealed families.wrapped inner transformer [2m0ms[0m  
-------------------------------- Running Tests --------------------------------
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform value classes between their primitive representations [2m1ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.not compile if target type is wrong for value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform enum represented as sealed trait hierarchy [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.PhoneNumber [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.Person [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.AddressBook [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PBTransformationSpec.transform bigger case classes.Order [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform always becomes a Right [2m5ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform will result in a Both if a field ends up as a Both [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.transform will result in a Left if a field ends up as a Left [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.1-arg [2m1ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.case classes [2m7ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.2-arg (accumulates errors) [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.simple transforms with Ior.success.3-arg (accumulate errors to the first Left [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.list [2m2ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.traverse should accumulate on the left side [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsIorSpec.wrapped subtype transformation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.cats.CatsValidatedErrorPathSpec.path of error should capture for.map [2m5ms[0m  
[info] ----------------------------------- Results -----------------------------------
[info] - io.scalaland.chimney.cats.CatsValidatedErrorPathSpec 14ms
[info]   - path of error should capture for 14ms
[info]     + case classes 7ms  
[info]     + list 2ms  
[info]     + map 5ms  
[info] - io.scalaland.chimney.cats.CatsIorSpec 7ms
[info]   + transform always becomes a Right 5ms  
[info]   + transform will result in a Both if a field ends up as a Both 1ms  
[info]   + transform will result in a Left if a field ends up as a Left 0ms  
[info]   - simple transforms with Ior 1ms
[info]     - success 1ms
[info]       + 1-arg 1ms  
[info]       + 2-arg (accumulates errors) 0ms  
[info]       + 3-arg (accumulate errors to the first Left 0ms  
[info]   + traverse should accumulate on the left side 0ms  
[info]   + wrapped subtype transformation 0ms  
[info] - io.scalaland.chimney.cats.CatsValidatedSpec 47ms
[info]   + transform always succeeds 13ms  
[info]   + transform always fails 1ms  
[info]   - simple transform with validation 4ms
[info]     - success 2ms
[info]       + 1-arg 2ms  
[info]       + 2-arg 0ms  
[info]       + 3-arg 0ms  
[info]     + failure with error handling 2ms  
[info]   - recursive transform with nested validation 2ms
[info]     + success 2ms  
[info]     + failure with error handling 0ms  
[info]   + wrapped subtype transformation 0ms  
[info]   - wrapped value classes 1ms
[info]     + from value class 0ms  
[info]     + to value class 1ms  
[info]   - wrapped options 0ms
[info]     + pure inner transformer 0ms  
[info]     + wrapped inner transformer 0ms  
[info]   - wrapped T to Option[T] 0ms
[info]     + pure inner transformer 0ms  
[info]     + wrapped inner transformer 0ms  
[info]   - wrapped .enableUnsafeOption 2ms
[info]     + pure inner transformer 2ms  java.util.NoSuchElementException: None.get
[info]     + wrapped inner transformer 0ms  java.util.NoSuchElementException: None.get
[info]   - wrapped iterables or arrays 5ms
[info]     + pure inner transformer 2ms  
[info]     + wrapped inner transformer 3ms  
[info]   - wrapped maps 13ms
[info]     + pure inner transformer 5ms  
[info]     + wrapped inner transformer 8ms  
[info]   - wrapped eithers 4ms
[info]     + pure inner transformer 2ms  
[info]     + wrapped inner transformer 2ms  
[info]     + mixed inner transformer 0ms  
[info]   - wrapped sealed families 2ms
[info]     + pure inner transformer 2ms  
[info]     + wrapped inner transformer 0ms  
[info] 
[info] Tests: 37, Passed: 37, Failed: 0
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #19 [2m4ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #21 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #40 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #44 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #46 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldConst` [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldComputed` [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #66.fix for `withFieldRenamed` [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #94 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #101 [2m0ms[0m  [34mBar(a)[39m
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix 'wrong forward definition' when defining implicit val transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when defining implicit def transformer [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when defining implicit val transformer wrapped in object [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix 'wrong forward reference' when assigning .derive to local transformer instance [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #105.fix stack overflow when assigning .derive to local transformer instance wrapped in object [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #108 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #113 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #121 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #125 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #139 [2m0ms[0m  [34mio.scalaland.chimney.IssuesSpec$$anon$27@17[39m
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 1 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 2 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #149.example 3 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #156 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #168.objects case [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #168.classes case [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstanceF twice [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstance followed by withCoproductInstanceF [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #173.withCoproductInstanceF followed by withCoproductInstance [2m0ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 1 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 2 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #177.case 3 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #185 [2m1ms[0m  
[32m+[39m io.scalaland.chimney.IssuesSpec.fix issue #182 [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch simple objects [2m2ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch objects with value classes in patch [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.patch with redundant fields [2m1ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.support optional types in patch [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.support mixed optional and regular types [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.optional fields in the patched object overwritten by None [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.fields of type Option[T] in the patched object not overwritten by None of type Option[Option[T]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.PatcherSpec.allow ignoring nones in patches [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always succeeds.option [2m9ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always succeeds.either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.work with basic renaming when bean getter lookup is disabled [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always fails.option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.transform always fails.either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.support automatic reading from java bean getters [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.root [2m4ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.not compile when bean getter lookup is disabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.1-arg.option [2m3ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.reading from Java beans.not compile when matching an is- getter with type other than Boolean [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.1-arg.either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.case classes [2m2ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert case class to java bean using setters on the target object [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.2-arg.option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when bean setters are not enabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.list [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.use implicit transformer directly [2m8ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.2-arg.either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when accessors are missing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.not compile when method accessor is disabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.3-arg.option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.use implicit transformer for nested field [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.works if transform is configured with .enableMethodAccessors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.map [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.success.3-arg.either [2m1ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.java beans [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert java bean to java bean [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is dropped - the target [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.failure with error handling.option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.writing to Java beans.convert to java bean involving recursive transformation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.tuples [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.not compile if source for the target fields is not provided [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.simple transform with validation.failure with error handling.either [2m2ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.work without enabling flags.beans reading [2m0ms[0m  [34mtrue[39m
[32m+[39m io.scalaland.chimney.ErrorPathSpec.error path should capture for.case classes with DSL [2m2ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.work without enabling flags.beans writing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided default value.pass when selector is valid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.not work when disabled locally.beans reading [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.success.option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided default value.not compile when selector is invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.JavaBeansSpec.scoped Java beans configuration.not work when disabled locally.beans writing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.success.either [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.use None when .enableOptionDefaultsToNone [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.failure with error handling.option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if .enableOptionDefaultsToNone is missing [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.recursive transform with nested validation.failure with error handling.either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.target has default value, but default values are disabled and .enableOptionDefaultsToNone [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped subtype transformation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not use None as default when other default value is set [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped value classes.from value class [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if default value is missing and no .enableOptionDefaultsToNone [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped value classes.to value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.support default values for Options.not compile if default values are disabled and no .enableOptionDefaultsToNone [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.use implicit transformer for option when .enableUnsafeOption.use transformer when .enableUnsafeOption [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.pure inner transformer.F = Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.use implicit transformer for option when .enableUnsafeOption.use transformer when .disableUnsafeOption adn then .enableUnsafeOption [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.pure inner transformer.F = Either[List[String], +*]] [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided generator function.pass when selector is valid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.wrapped inner transformer.F = Option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support different set of fields of source and target.field is added to the target.fill the field with provided generator function.not compile when selector is invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped options.wrapped inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].pure inner transformer.F = Option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.use default parameter value.field does not exists - the source [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].wrapped inner transformer.F = Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped T to Option[T].wrapped inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.use default parameter value.field does not exists - nested object [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.pure inner transformer.F = Option [2m0ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.field exists - the source [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.another modifier is provided [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.wrapped inner transformer.F = Option [2m0ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.default values are disabled and another modifier is provided [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped .enableUnsafeOption.wrapped inner transformer.F = Either[List[String], +*]] [2m1ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.local transformer for default value exists [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.pure inner transformer.F = Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not use default parameter value.local transformer for the whole entity exists [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support default parameters.not compile when default parameter values are disabled [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: correct [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.wrapped inner transformer.F = Option [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: incorrect [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped iterables or arrays.wrapped inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform with rename.between different types: without implicit [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelling modifier is not provided [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.relabel fields with relabelling modifier [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelling selectors are invalid [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support relabelling of fields.not compile if relabelled - a wrong way [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support value classes.transforming value class to a value [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support value classes.transforming value to a value class [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support scala.Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.pure inner transformer.F = Option [2m5ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support automatically filling of scala.Unit [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support scala.util.Either [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.wrapped inner transformer.F = Option [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Iterables collections [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Arrays [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped maps.wrapped inner transformer.F = Either[List[String], +*]] [2m4ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Iterables and Arrays [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.pure inner transformer.F = Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support Map [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Iterables and Maps [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.wrapped inner transformer.F = Option [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support common data types.support conversion between Arrays and Maps [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.wrapped inner transformer.F = Either[List[String], +*]] [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.use implicit transformer [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.mixed inner transformer.F = Option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.preserve option to option mapping [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.transforming None leads to NoSuchElementException [2m0ms[0m  [34mjava.util.NoSuchElementException: None.get[39m
[32m+[39m io.scalaland.chimney.DslSpec.support with .enableUnsafeOption.transforming fixed None type does not compile [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.val and lazy vals work [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.works with rename [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.method is disabled by default [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped eithers.mixed inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.works if transform is configured with .enableMethodAccessors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support using method calls to fill values from target type.protected and private methods are not considered (even if accessible) [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.pure inner transformer.F = Option [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming from smaller to bigger enum [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.pure inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming from bigger to smaller enum [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.enum types encoded as sealed hierarchies of case objects.transforming flat and deep enum [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.wrapped inner transformer.F = Option [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming non-isomorphic domains [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.wrapped sealed families.wrapped inner transformer.F = Either[List[String], +*]] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming isomorphic domains that differ a detail [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.fail compilation if there is unresolved conflict [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.transforming flat and deep domains [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support sealed hierarchies.fail on ambiguous targets [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly using .withFieldComputed [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly using .withFieldComputedF [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.monomorphic source to polymorphic target [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.implicit conflict resolution.resolve conflict explicitly prioritizing: last wins [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.polymorphic source to monomorphic target [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.polymorphic source to polymorphic target [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.safe option unwrapping [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.handle type-inference for polymorphic computation [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.scoped config only [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support polymorphic source/target objects and modifiers.automatically fill Unit parameters [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.scoped config overridden by instance flag [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support abstracting over a value in dsl operations [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support scoped transformer configuration passed implicitly.compile error when optionDefaultsToNone were disabled locally [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform from non-case class to case class.support non-case classes inputs [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support config type-aliases [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform from non-case class to case class.support trait inputs [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslFSpec.support deriving wrapped transformer from pure [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform T to Option[T] [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform between case classes and tuples.even recursively [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.transform between case classes and tuples.handle tuple transformation errors [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.defined by hand [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.generated automatically [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support recursive data structures.support mutual recursion [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support macro dependent transformers.Option[List[A]] -> List[B] [2m2ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.scoped config only [2m0ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.scoped config overridden by instance flag [2m1ms[0m  
[32m+[39m io.scalaland.chimney.DslSpec.support scoped transformer configuration passed implicitly.compile error when optionDefaultsToNone were disabled locally [2m0ms[0m  
[info] ----------------------------------- Results -----------------------------------
[info] - io.scalaland.chimney.DslSpec 34ms
[info]   + use implicit transformer directly 8ms  
[info]   + use implicit transformer for nested field 0ms  
[info]   - support different set of fields of source and target 3ms
[info]     + field is dropped - the target 0ms  
[info]     - field is added to the target 3ms
[info]       + not compile if source for the target fields is not provided 2ms  
[info]       - fill the field with provided default value 0ms
[info]         + pass when selector is valid 0ms  
[info]         + not compile when selector is invalid 0ms  
[info]       - support default values for Options 1ms
[info]         + use None when .enableOptionDefaultsToNone 1ms  
[info]         + not compile if .enableOptionDefaultsToNone is missing 0ms  
[info]         + target has default value, but default values are disabled and .enableOptionDefaultsToNone 0ms  
[info]         + not use None as default when other default value is set 0ms  
[info]         + not compile if default value is missing and no .enableOptionDefaultsToNone 0ms  
[info]         + not compile if default values are disabled and no .enableOptionDefaultsToNone 0ms  
[info]       - use implicit transformer for option when .enableUnsafeOption 0ms
[info]         + use transformer when .enableUnsafeOption 0ms  
[info]         + use transformer when .disableUnsafeOption adn then .enableUnsafeOption 0ms  
[info]       - fill the field with provided generator function 0ms
[info]         + pass when selector is valid 0ms  
[info]         + not compile when selector is invalid 0ms  
[info]   - support default parameters 3ms
[info]     - use default parameter value 1ms
[info]       + field does not exists - the source 1ms  
[info]       + field does not exists - nested object 0ms  
[info]     - not use default parameter value 2ms
[info]       + field exists - the source 1ms  
[info]       + another modifier is provided 0ms  
[info]       + default values are disabled and another modifier is provided 0ms  
[info]       + local transformer for default value exists 0ms  
[info]       + local transformer for the whole entity exists 1ms  
[info]     + not compile when default parameter values are disabled 0ms  
[info]   - transform with rename 0ms
[info]     + between different types: correct 0ms  
[info]     + between different types: incorrect 0ms  
[info]     + between different types: without implicit 0ms  
[info]   - support relabelling of fields 1ms
[info]     + not compile if relabelling modifier is not provided 1ms  
[info]     + relabel fields with relabelling modifier 0ms  
[info]     + not compile if relabelling selectors are invalid 0ms  
[info]     + not compile if relabelled - a wrong way 0ms  
[info]   - support value classes 0ms
[info]     + transforming value class to a value 0ms  
[info]     + transforming value to a value class 0ms  
[info]   - support common data types 6ms
[info]     + support scala.Option 1ms  
[info]     + support automatically filling of scala.Unit 1ms  
[info]     + support scala.util.Either 0ms  
[info]     + support Iterables collections 0ms  
[info]     + support Arrays 0ms  
[info]     + support conversion between Iterables and Arrays 1ms  
[info]     + support Map 2ms  
[info]     + support conversion between Iterables and Maps 1ms  
[info]     + support conversion between Arrays and Maps 0ms  
[info]   - support with .enableUnsafeOption 1ms
[info]     + use implicit transformer 1ms  
[info]     + preserve option to option mapping 0ms  
[info]     + transforming None leads to NoSuchElementException 0ms  java.util.NoSuchElementException: None.get
[info]     + transforming fixed None type does not compile 0ms  
[info]   - support using method calls to fill values from target type 1ms
[info]     + val and lazy vals work 0ms  
[info]     + works with rename 1ms  
[info]     + method is disabled by default 0ms  
[info]     + works if transform is configured with .enableMethodAccessors 0ms  
[info]     + protected and private methods are not considered (even if accessible) 0ms  
[info]   - support sealed hierarchies 3ms
[info]     - enum types encoded as sealed hierarchies of case objects 2ms
[info]       + transforming from smaller to bigger enum 2ms  
[info]       + transforming from bigger to smaller enum 0ms  
[info]       + transforming flat and deep enum 0ms  
[info]     + transforming non-isomorphic domains 1ms  
[info]     + transforming isomorphic domains that differ a detail 0ms  
[info]     + transforming flat and deep domains 0ms  
[info]     + fail on ambiguous targets 0ms  
[info]   - support polymorphic source/target objects and modifiers 2ms
[info]     + monomorphic source to polymorphic target 2ms  
[info]     + polymorphic source to monomorphic target 0ms  
[info]     + polymorphic source to polymorphic target 0ms  
[info]     + handle type-inference for polymorphic computation 0ms  
[info]     + automatically fill Unit parameters 0ms  
[info]   + support abstracting over a value in dsl operations 1ms  
[info]   - transform from non-case class to case class 0ms
[info]     + support non-case classes inputs 0ms  
[info]     + support trait inputs 0ms  
[info]   + transform T to Option[T] 0ms  
[info]   - transform between case classes and tuples 0ms
[info]     + even recursively 0ms  
[info]     + handle tuple transformation errors 0ms  
[info]   - support recursive data structures 2ms
[info]     + defined by hand 1ms  
[info]     + generated automatically 0ms  
[info]     + support mutual recursion 1ms  
[info]   - support macro dependent transformers 2ms
[info]     + Option[List[A]] -> List[B] 2ms  
[info]   - support scoped transformer configuration passed implicitly 1ms
[info]     + scoped config only 0ms  
[info]     + scoped config overridden by instance flag 1ms  
[info]     + compile error when optionDefaultsToNone were disabled locally 0ms  
[info] - io.scalaland.chimney.DslFSpec 48ms
[info]   - transform always succeeds 9ms
[info]     + option 9ms  
[info]     + either 0ms  
[info]   - transform always fails 0ms
[info]     + option 0ms  
[info]     + either 0ms  
[info]   - simple transform with validation 6ms
[info]     - success 4ms
[info]       - 1-arg 3ms
[info]         + option 3ms  
[info]         + either 0ms  
[info]       - 2-arg 0ms
[info]         + option 0ms  
[info]         + either 0ms  
[info]       - 3-arg 1ms
[info]         + option 0ms  
[info]         + either 1ms  
[info]     - failure with error handling 2ms
[info]       + option 0ms  
[info]       + either 2ms  
[info]   - recursive transform with nested validation 2ms
[info]     - success 2ms
[info]       + option 1ms  
[info]       + either 1ms  
[info]     - failure with error handling 0ms
[info]       + option 0ms  
[info]       + either 0ms  
[info]   + wrapped subtype transformation 0ms  
[info]   - wrapped value classes 1ms
[info]     + from value class 1ms  
[info]     + to value class 0ms  
[info]   - wrapped options 2ms
[info]     - pure inner transformer 2ms
[info]       + F = Option 1ms  
[info]       + F = Either[List[String], +*]] 1ms  
[info]     - wrapped inner transformer 0ms
[info]       + F = Option 0ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]   - wrapped T to Option[T] 1ms
[info]     - pure inner transformer 0ms
[info]       + F = Option 0ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 1ms
[info]       + F = Option 1ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]   - wrapped .enableUnsafeOption 1ms
[info]     - pure inner transformer 0ms
[info]       + F = Option 0ms  java.util.NoSuchElementException: None.get
[info]       + F = Either[List[String], +*]] 0ms  java.util.NoSuchElementException: None.get
[info]     - wrapped inner transformer 1ms
[info]       + F = Option 0ms  java.util.NoSuchElementException: None.get
[info]       + F = Either[List[String], +*]] 1ms  java.util.NoSuchElementException: None.get
[info]   - wrapped iterables or arrays 5ms
[info]     - pure inner transformer 1ms
[info]       + F = Option 1ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 4ms
[info]       + F = Option 4ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]   - wrapped maps 13ms
[info]     - pure inner transformer 5ms
[info]       + F = Option 5ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 8ms
[info]       + F = Option 4ms  
[info]       + F = Either[List[String], +*]] 4ms  
[info]   - wrapped eithers 4ms
[info]     - pure inner transformer 1ms
[info]       + F = Option 1ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 3ms
[info]       + F = Option 2ms  
[info]       + F = Either[List[String], +*]] 1ms  
[info]     - mixed inner transformer 0ms
[info]       + F = Option 0ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]   - wrapped sealed families 1ms
[info]     - pure inner transformer 1ms
[info]       + F = Option 1ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]     - wrapped inner transformer 0ms
[info]       + F = Option 0ms  
[info]       + F = Either[List[String], +*]] 0ms  
[info]   - implicit conflict resolution 1ms
[info]     + fail compilation if there is unresolved conflict 1ms  
[info]     + resolve conflict explicitly using .withFieldComputed 0ms  
[info]     + resolve conflict explicitly using .withFieldComputedF 0ms  
[info]     + resolve conflict explicitly prioritizing: last wins 0ms  
[info]   + safe option unwrapping 0ms  
[info]   - support scoped transformer configuration passed implicitly 1ms
[info]     + scoped config only 0ms  
[info]     + scoped config overridden by instance flag 1ms  
[info]     + compile error when optionDefaultsToNone were disabled locally 0ms  
[info]   + support config type-aliases 0ms  
[info]   + support deriving wrapped transformer from pure 1ms  
[info] - io.scalaland.chimney.ErrorPathSpec 12ms
[info]   - error path should capture for 12ms
[info]     + root 4ms  
[info]     + case classes 2ms  
[info]     + list 0ms  
[info]     + map 4ms  
[info]     + java beans 0ms  
[info]     + tuples 0ms  
[info]     + case classes with DSL 2ms  
[info] - io.scalaland.chimney.JavaBeansSpec 3ms
[info]   - reading from Java beans 2ms
[info]     + work with basic renaming when bean getter lookup is disabled 2ms  
[info]     + support automatic reading from java bean getters 0ms  
[info]     + not compile when bean getter lookup is disabled 0ms  
[info]     + not compile when matching an is- getter with type other than Boolean 0ms  
[info]   - writing to Java beans 1ms
[info]     + convert case class to java bean using setters on the target object 1ms  
[info]     + not compile when bean setters are not enabled 0ms  
[info]     + not compile when accessors are missing 0ms  
[info]     + not compile when method accessor is disabled 0ms  
[info]     + works if transform is configured with .enableMethodAccessors 0ms  
[info]     + convert java bean to java bean 0ms  
[info]     + convert to java bean involving recursive transformation 0ms  
[info]   - scoped Java beans configuration 0ms
[info]     - work without enabling flags 0ms
[info]       + beans reading 0ms  true
[info]       + beans writing 0ms  
[info]     - not work when disabled locally 0ms
[info]       + beans reading 0ms  
[info]       + beans writing 0ms  
[info] - io.scalaland.chimney.PatcherSpec 3ms
[info]   + patch simple objects 2ms  
[info]   + patch objects with value classes in patch 0ms  
[info]   + patch with redundant fields 1ms  
[info]   + support optional types in patch 0ms  
[info]   + support mixed optional and regular types 0ms  
[info]   + optional fields in the patched object overwritten by None 0ms  
[info]   + fields of type Option[T] in the patched object not overwritten by None of type Option[Option[T]] 0ms  
[info]   + allow ignoring nones in patches 0ms  
[info] - io.scalaland.chimney.IssuesSpec 15ms
[info]   + fix issue #19 4ms  
[info]   + fix issue #21 0ms  
[info]   + fix issue #40 0ms  
[info]   + fix issue #44 0ms  
[info]   + fix issue #46 1ms  
[info]   - fix issue #66 1ms
[info]     + fix for `withFieldConst` 1ms  
[info]     + fix for `withFieldComputed` 0ms  
[info]     + fix for `withFieldRenamed` 0ms  
[info]   + fix issue #94 1ms  
[info]   + fix issue #101 0ms  Bar(a)
[info]   - fix issue #105 1ms
[info]     + fix 'wrong forward definition' when defining implicit val transformer 0ms  
[info]     + fix stack overflow when defining implicit def transformer 0ms  
[info]     + fix stack overflow when defining implicit val transformer wrapped in object 0ms  
[info]     + fix 'wrong forward reference' when assigning .derive to local transformer instance 1ms  
[info]     + fix stack overflow when assigning .derive to local transformer instance wrapped in object 0ms  
[info]   + fix issue #108 0ms  
[info]   + fix issue #113 0ms  
[info]   + fix issue #121 0ms  
[info]   + fix issue #125 1ms  
[info]   + fix issue #139 0ms  io.scalaland.chimney.IssuesSpec$$anon$27@17
[info]   - fix issue #149 0ms
[info]     + example 1 0ms  
[info]     + example 2 0ms  
[info]     + example 3 0ms  
[info]   + fix issue #156 1ms  
[info]   - fix issue #168 0ms
[info]     + objects case 0ms  
[info]     + classes case 0ms  
[info]   - fix issue #173 1ms
[info]     + withCoproductInstanceF twice 1ms  
[info]     + withCoproductInstance followed by withCoproductInstanceF 0ms  
[info]     + withCoproductInstanceF followed by withCoproductInstance 0ms  
[info]   - fix issue #177 3ms
[info]     + case 1 1ms  
[info]     + case 2 1ms  
[info]     + case 3 1ms  
[info]   + fix issue #185 1ms  
[info]   + fix issue #182 0ms  
[info] - io.scalaland.chimney.PBTransformationSpec 1ms
[info]   + transform value classes between their primitive representations 1ms  
[info]   + not compile if target type is wrong for value class 0ms  
[info]   + transform enum represented as sealed trait hierarchy 0ms  
[info]   - transform bigger case classes 0ms
[info]     + PhoneNumber 0ms  
[info]     + Person 0ms  
[info]     + AddressBook 0ms  
[info]     + Order 0ms  
[info] 
[info] Tests: 206, Passed: 206, Failed: 0
[error] -- [E007] Type Mismatch Error: /home/lukaszl/IdeaProjects/chimney/chimney3/src/test/scala/io/scalaland/chimney/TransformerDslSpec.scala:406:35 
[error] 406 |        Seq(Foo("a")).transformInto[Seq[Bar]] ==> Seq(Bar("a"))
[error]     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[error]     |Found:    (factory : 
[error]     |  collection.Factory[b, 
[error]     |    Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]     |  ]
[error]     |)
[error]     |Required: collection.Factory[
[error]     |  io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error]     |, Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error]     | This location contains code that was inlined from SpecialDerive.scala:91
[error]     | This location contains code that was inlined from TransformerDerive.scala:29
[error]     | This location contains code that was inlined from TransformerDerive.scala:18
[error]     | This location contains code that was inlined from Transformer.scala:17
[error]     | This location contains code that was inlined from package.scala:12
[error]     | This location contains code that was inlined from TransformerDslSpec.scala:406
[error] Explanation
[error] ===========
[error] 
[error] I tried to show that
[error]   (factory : 
[error]   collection.Factory[b, 
[error]     Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )
[error] conforms to
[error]   collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error] but the comparison trace ended with `false`:
[error]           
[error]   ==> (factory : 
[error]   collection.Factory[b, 
[error]     Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error]     ==> (factory : 
[error]   collection.Factory[b, 
[error]     Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring)
[error]       ==> collection.Factory[b, 
[error]   Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (left is approximated)
[error]         ==> collection.Factory[b, 
[error]   Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring)
[error]           ==> collection.type  <:  collection.type
[error]             ==> collection.type  <:  collection.type (recurring)
[error]             <== collection.type  <:  collection.type (recurring) = true
[error]           <== collection.type  <:  collection.type = true
[error]           ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b
[error]             ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b (recurring)
[error]               ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (right is approximated)
[error]                 ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (recurring)
[error]                 <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (recurring) = false
[error]               <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (right is approximated) = false
[error]             <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b (recurring) = false
[error]           <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b = false
[error]         <== collection.Factory[b, 
[error]   Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring) = false
[error]       <== collection.Factory[b, 
[error]   Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (left is approximated) = false
[error]     <== (factory : 
[error]   collection.Factory[b, 
[error]     Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring) = false
[error]   <== (factory : 
[error]   collection.Factory[b, 
[error]     Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , Seq[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] = false
[error] 
[error] The tests were made under a constraint with:
[error]  uninstantiated variables: A
[error]  constrained types: 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("imie" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("imie" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("imie" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("imie" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("imie" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("imie" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [_ <: LazyRef(String), name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("z" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("z" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]       ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]       ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(String), name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Any), _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (?1 : EmailPatch *: EmptyTuple.type)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple.type])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (?2 : EmailPatch *: EmptyTuple.type)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple.type])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("id" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("id" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("name" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("name" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , [A] => scala.collection.Factory[A, Seq[A]]
[error]  bounds: 
[error]      _ <: Tuple
[error]      c
[error]      config <: Tuple
[error]      _ <: Tuple
[error]      c
[error]      config <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      tail <: Tuple
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      name >: ("y" : String) & String <: ("y" : String)
[error]      name <: String
[error]      name >: ("y" : String) & String <: ("y" : String)
[error]      name <: String
[error]      _ >: ("name" : String) & String <: ("name" : String)
[error]      name >: ("imie" : String) & String <: ("imie" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ >: ("age" : String) & String <: ("age" : String)
[error]      name >: ("wiek" : String) & String <: ("wiek" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ := ("name" : String)
[error]      tail <: Tuple
[error]      h
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]         ("name" : String)
[error]       , ("imie" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ := ("name" : String)
[error]      tail <: Tuple
[error]      h
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]         ("name" : String)
[error]       , ("imie" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      _ >: ("y" : String) & String <: ("y" : String)
[error]      name >: ("z" : String) & String <: ("z" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Billion[Int]
[error]      _ := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Trillion[Int]
[error]      _ := io.scalaland.chimney.examples.long.Billion[Long]
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Infinity.type
[error]      _ := io.scalaland.chimney.examples.long.Infinity.type
[error]      t
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      _ <: LazyRef(String)
[error]      name <: String
[error]      _ <: LazyRef(Any)
[error]      _
[error]      _ := io.scalaland.chimney.examples.short.Billion[Long]
[error]      _ := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _
[error]      _
[error]      _ := io.scalaland.chimney.examples.short.Trillion[Long]
[error]      _ := io.scalaland.chimney.examples.long.Billion[Int]
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Infinity.type
[error]      _ := io.scalaland.chimney.examples.long.Infinity.type
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x >: String
[error]      xs >: String *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      A >: b <: io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error]  ordering: 
[error] -- [E007] Type Mismatch Error: /home/lukaszl/IdeaProjects/chimney/chimney3/src/test/scala/io/scalaland/chimney/TransformerDslSpec.scala:431:37 
[error] 431 |        Array(Foo("a")).transformInto[List[Bar]] ==> List(Bar("a"))
[error]     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[error]     |Found:    (factory : 
[error]     |  collection.Factory[b, 
[error]     |    List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]     |  ]
[error]     |)
[error]     |Required: collection.Factory[
[error]     |  io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error]     |, List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error]     | This location contains code that was inlined from SpecialDerive.scala:57
[error]     | This location contains code that was inlined from TransformerDerive.scala:29
[error]     | This location contains code that was inlined from TransformerDerive.scala:18
[error]     | This location contains code that was inlined from Transformer.scala:17
[error]     | This location contains code that was inlined from package.scala:12
[error]     | This location contains code that was inlined from TransformerDslSpec.scala:431
[error] Explanation
[error] ===========
[error] 
[error] I tried to show that
[error]   (factory : 
[error]   collection.Factory[b, 
[error]     List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )
[error] conforms to
[error]   collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error] but the comparison trace ended with `false`:
[error]           
[error]   ==> (factory : 
[error]   collection.Factory[b, 
[error]     List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]]
[error]     ==> (factory : 
[error]   collection.Factory[b, 
[error]     List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring)
[error]       ==> collection.Factory[b, 
[error]   List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (left is approximated)
[error]         ==> collection.Factory[b, 
[error]   List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring)
[error]           ==> collection.type  <:  collection.type
[error]             ==> collection.type  <:  collection.type (recurring)
[error]             <== collection.type  <:  collection.type (recurring) = true
[error]           <== collection.type  <:  collection.type = true
[error]           ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b
[error]             ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b (recurring)
[error]               ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (right is approximated)
[error]                 ==> io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (recurring)
[error]                 <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (recurring) = false
[error]               <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  Nothing (right is approximated) = false
[error]             <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b (recurring) = false
[error]           <== io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar  <:  b = false
[error]         <== collection.Factory[b, 
[error]   List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring) = false
[error]       <== collection.Factory[b, 
[error]   List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error] ]  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (left is approximated) = false
[error]     <== (factory : 
[error]   collection.Factory[b, 
[error]     List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] (recurring) = false
[error]   <== (factory : 
[error]   collection.Factory[b, 
[error]     List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]
[error]   ]
[error] )  <:  collection.Factory[
[error]   io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error] , List[io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar]] = false
[error] 
[error] The tests were made under a constraint with:
[error]  uninstantiated variables: A
[error]  constrained types: 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("imie" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("imie" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("imie" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]           ("name" : String)
[error]         , ("imie" : String)]
[error]        *: EmptyTuple, name]
[error]     ]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("imie" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("imie" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("imie" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("imie" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("wiek" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("wiek" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("wiek" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("wiek" : String) & 
[error]           String
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [_ <: LazyRef(String), name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: String, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("z" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("z" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , io.scalaland.chimney.internal.DisableField[EmptyTuple, name]]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String) & 
[error]         String
[error]       ]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String) 
[error]         &
[error]        String]
[error]      *: tail, tail]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("y" : String)
[error]          
[error]       & String]
[error]      *: tail, tail]
[error] , 
[error]   [_ <: LazyRef(String), tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, 
[error]         ("y" : String)
[error]        & String]
[error]      *: tail, tail]
[error] , 
[error]   [h, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[h *: tail, h *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.DisableField[tail, ("y" : String) & String
[error]           ]
[error]       )
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.MethodAccessors
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.MethodAccessors), 
[error]       tail
[error]     ]
[error] , 
[error]   [tail <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[(
[error]       io.scalaland.chimney.internal.TransformerFlag.DefaultValues
[error]      *: tail, io.scalaland.chimney.internal.TransformerFlag.DefaultValues), tail
[error]       ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]       ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[FF, t]
[error]       ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]
[error]      *: _, io.scalaland.chimney.internal.TransformerCfg.FieldConst[Name]]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Int]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: LazyRef(String)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(String), name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Any), _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_ <: String, name <: String] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[_, name]
[error]     , 
[error]       io.scalaland.chimney.internal.DisableField[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , name]
[error]     ]
[error] , 
[error]   [_, _] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[_, _]
[error]     , 
[error]       io.scalaland.chimney.internal.EnableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Zero.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Zero.type]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Million[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Million[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("count" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("count" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("count" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Billion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.InstanceConfigOf[tail
[error]           , 
[error]         io.scalaland.chimney.examples.short.Trillion[Long]]
[error]       )
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [t <: LazyRef(Any), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , t]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, C]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (?1 : EmailPatch *: EmptyTuple.type)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy1 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple.type])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (Singleton & EmailPatch *: EmptyTuple)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, (?2 : EmailPatch *: EmptyTuple.type)])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(
[error]         scala.Tuple.Concat[xs1, (that$proxy2 : EmailPatch *: EmptyTuple.type)]
[error]       )
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple.type])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [x1, xs1 <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x1 *: xs1, x1 *: 
[error]       LazyRef(scala.Tuple.Concat[xs1, EmailPatch *: EmptyTuple])
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreNoneInPatch
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, EmptyTuple]
[error] , 
[error]   [c, config <: Tuple] =>> 
[error]     scala.runtime.MatchCase[c *: config, c *: 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.EnablePatcherConfig[config, 
[error]           io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.PatcherCfg.IgnoreRedundantPatcherFields
[error]      *: _, (true : Boolean)]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("id" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("id" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("id" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("id" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("id" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("name" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("name" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("name" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("name" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("name" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("x" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("x" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("x" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("x" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("z" : String)]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[("z" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("z" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("z" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: String, _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [x, xs <: Tuple] =>> 
[error]     scala.runtime.MatchCase[x *: xs, 
[error]       scala.compiletime.ops.int.S[LazyRef(scala.Tuple.Size[xs])]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConst[("value" : String)
[error]         ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldConstF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_ <: LazyRef(Tuple)] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputedF[
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [fromField <: LazyRef(String), _ <: Tuple] =>> 
[error]     scala.runtime.MatchCase[
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]      *: _, 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[fromField, 
[error]         ("value" : String)
[error]       ]
[error]     ]
[error] , 
[error]   [_, tail <: Tuple] =>> 
[error]     scala.runtime.MatchCase[_ *: tail, 
[error]       LazyRef(
[error]         io.scalaland.chimney.internal.derived.DeriveUtils.ConfigOf[tail, 
[error]           ("value" : String)
[error]         ]
[error]       )
[error]     ]
[error] , [A] => scala.collection.Factory[A, List[A]]
[error]  bounds: 
[error]      _ <: Tuple
[error]      c
[error]      config <: Tuple
[error]      _ <: Tuple
[error]      c
[error]      config <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      tail <: Tuple
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      name >: ("y" : String) & String <: ("y" : String)
[error]      name <: String
[error]      name >: ("y" : String) & String <: ("y" : String)
[error]      name <: String
[error]      _ >: ("name" : String) & String <: ("name" : String)
[error]      name >: ("imie" : String) & String <: ("imie" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ >: ("age" : String) & String <: ("age" : String)
[error]      name >: ("wiek" : String) & String <: ("wiek" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ := ("name" : String)
[error]      tail <: Tuple
[error]      h
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]         ("name" : String)
[error]       , ("imie" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ := ("name" : String)
[error]      tail <: Tuple
[error]      h
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldRelabelled[
[error]         ("name" : String)
[error]       , ("imie" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      _ >: ("y" : String) & String <: ("y" : String)
[error]      name >: ("z" : String) & String <: ("z" : String)
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      tail <: Tuple
[error]      _ <: String
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      tail <: LazyRef(Tuple)
[error]      _ <: LazyRef(String)
[error]      tail <: Tuple
[error]      h
[error]      tail <: Tuple
[error]      tail <: LazyRef(Tuple)
[error]      tail >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Billion[Int]
[error]      _ := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Trillion[Int]
[error]      _ := io.scalaland.chimney.examples.long.Billion[Long]
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Infinity.type
[error]      _ := io.scalaland.chimney.examples.long.Infinity.type
[error]      t
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Billion[Int]
[error]       , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Long
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Trillion[Int]
[error]       , io.scalaland.chimney.examples.long.Billion[Long]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Billion[Int]
[error]         , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]       ]
[error]      <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Long]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Billion[Int]
[error]           , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Trillion[Int]
[error]         , io.scalaland.chimney.examples.long.Billion[Long]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]               io.scalaland.chimney.examples.short.Billion[Int]
[error]             , io.scalaland.chimney.examples.long.Milliard[Long]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]             io.scalaland.chimney.examples.short.Trillion[Int]
[error]           , io.scalaland.chimney.examples.long.Billion[Long]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      name <: LazyRef(String)
[error]      _ <: LazyRef(String)
[error]      name <: String
[error]      _ <: LazyRef(Any)
[error]      _
[error]      _ := io.scalaland.chimney.examples.short.Billion[Long]
[error]      _ := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _
[error]      _
[error]      _ := io.scalaland.chimney.examples.short.Trillion[Long]
[error]      _ := io.scalaland.chimney.examples.long.Billion[Int]
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      name <: String
[error]      _ <: String
[error]      name <: String
[error]      _ := io.scalaland.chimney.examples.short.Infinity.type
[error]      _ := io.scalaland.chimney.examples.long.Infinity.type
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Billion[Long]
[error]       , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _ >: io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[EmptyTuple, 
[error]         io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]         io.scalaland.chimney.examples.short.Trillion[Long]
[error]       , io.scalaland.chimney.examples.long.Billion[Int]]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Milliard[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]           io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Billion[Long]
[error]         , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]       ]
[error]      <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      t
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]         io.scalaland.chimney.examples.short.Infinity.type
[error]       , io.scalaland.chimney.examples.long.Infinity.type]
[error]      tail
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t <: LazyRef(Any)
[error]      _ <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Billion[Int]
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]             io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Billion[Long]
[error]           , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]           io.scalaland.chimney.examples.short.Trillion[Long]
[error]         , io.scalaland.chimney.examples.long.Billion[Int]]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      t := io.scalaland.chimney.examples.long.Infinity.type
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.DisableConfig[
[error]         io.scalaland.chimney.internal.EnableConfig[
[error]           io.scalaland.chimney.internal.EnableConfig[
[error]             io.scalaland.chimney.internal.EnableConfig[EmptyTuple, 
[error]               io.scalaland.chimney.internal.TransformerCfg.WrapperType[Option]
[error]             ]
[error]           , 
[error]             io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]               io.scalaland.chimney.examples.short.Billion[Long]
[error]             , io.scalaland.chimney.examples.long.Milliard[Int]]
[error]           ]
[error]         , 
[error]           io.scalaland.chimney.internal.TransformerCfg.CoproductInstanceF[
[error]             io.scalaland.chimney.examples.short.Trillion[Long]
[error]           , io.scalaland.chimney.examples.long.Billion[Int]]
[error]         ]
[error]       , 
[error]         io.scalaland.chimney.internal.TransformerCfg.CoproductInstance[
[error]           io.scalaland.chimney.examples.short.Infinity.type
[error]         , io.scalaland.chimney.examples.long.Infinity.type]
[error]       ]
[error]      <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: IdPatch
[error]      xs1 >: PhonePatch *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x1 >: PhonePatch
[error]      xs1 >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      c
[error]      config <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      x >: String
[error]      xs >: String *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: io.scalaland.chimney.internal.TransformerCfg.FieldConst[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: Tuple
[error]      _ >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: Int
[error]      xs >: (String, (Double, Double)) <: Tuple
[error]      x >: String
[error]      xs >: (Double, Double) *: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      x >: (Double, Double)
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ >: EmptyTuple.type <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      >: 
[error]       io.scalaland.chimney.internal.TransformerCfg.FieldComputed[("y" : String)]
[error]      tail >: EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      _ <: Tuple
[error]      fromField <: String
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      x >: String
[error]      xs >: scala.Tuple$package.EmptyTuple.type <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      _ <: LazyRef(Tuple)
[error]      fromField <: LazyRef(String)
[error]      _ <: Tuple
[error]      _
[error]      tail <: Tuple
[error]      A >: b <: io.scalaland.chimney.TransformerDslSpec.CommonDataTypesSpec.Bar
[error]  ordering: 
[error] two errors found
[error] two errors found
[error] (chimney3 / Test / compileIncremental) Compilation failed
[error] Total time: 18 s, completed 30.04.2021, 21:40:41
